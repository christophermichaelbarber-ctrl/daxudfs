/// Area: convert acres(ac) to square meters(m²)
function 'Dax.Convert.AcresToSquareMeters' =
		(
		    // The area in acres
		    area: DOUBLE
		) =>
		    area * 4046.8564224

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temparature: convert Celsius(°C) to Fahrenheit(°F)
function 'Dax.Convert.CelsiusToFahrenheit' =
		(
		    // The temperature in Celsius
		    temperature: DOUBLE
		) =>
		    ( temperature * ( 9 / 5 ) ) + 32

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temparature: convert Celsius(°C) to Kelvin(K)
function 'Dax.Convert.CelsiusToKelvin' =
		(
		    // The temperature in Celsius
		    temperature: DOUBLE
		) =>
		    temperature + 273.15

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Volume: convert cubic feet(ft³) to cubic meters(m³)
function 'Dax.Convert.CubicFeetToCubicMeters' =
		(
		    // The volume in cubic feet
		    volume: DOUBLE
		) =>
		    volume / 35.31466672148859

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Flow: convert cubic meters per hour (m³/h) to liters per second (L/s)
function 'Dax.Convert.CubicMetersPerHourToLitersPerSecond' =
		(
		    // The flow rate in cubic meters per hour
		    flow: DOUBLE
		) =>
		    flow / 3.6

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Volume: convert cubic meters(m³) to cubic feet(ft³)
function 'Dax.Convert.CubicMetersToCubicFeet' =
		(
		    // The volume in cubic meters
		    volume: DOUBLE
		) =>
		    volume * 35.31466672148859

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Time: convert human-readable time to epoch(Unix time)
function 'Dax.Convert.DateToEpoch' =
		(
		    // The date to convert
		    dateTime : DATETIME
		) =>
		    DATEDIFF ( DATE ( 1970, 1, 1 ), dateTime, SECOND )

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Time: convert epoch(Unix time) to human-readable time
function 'Dax.Convert.EpochToDate' =
		(
		    // The epoch to convert
		    epoch: INT64
		) =>
		    DATE ( 1970, 1, 1 ) + ( epoch / 86400 )

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temperature: convert Fahrenheit(°F) to Celsius(°C)
function 'Dax.Convert.FahrenheitToCelsius' =
		(
		    // The temperature in Fahrenheit
		    temperature: DOUBLE
		) =>
		    ( temperature - 32 ) / ( 9 / 5 )

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temperature: convert Fahrenheit(°F) to Kelvin(K)
function 'Dax.Convert.FahrenheitToKelvin' =
		(
		    // The temperature in Fahrenheit
		    temperature: DOUBLE
		) =>
		    ( temperature + 459.67 ) * ( 5 / 9 )

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Distance: convert feet(ft) to meters(m)
function 'Dax.Convert.FeetToMeters' =
		(
		    // The distance in feet
		    distance: DOUBLE
		) =>
		    distance / 3.28084

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Volume: convert gallons(gal:US-fluid) to liters(L)
function 'Dax.Convert.GallonsToLiters' =
		(
		    // The volume in gallons
		    volume: DOUBLE
		) =>
		    volume * 3.785411784

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Weight: convert kilograms(kg) to pounds(lb:avdp)
function 'Dax.Convert.KilogramsToPounds' =
		(
		    // The weight in kilograms
		    weight: DOUBLE
		) =>
		    weight * 2.2046226218487757

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temparature: convert Kelvin(K) to Celsius(°C)
function 'Dax.Convert.KelvinToCelsius' =
		(
		    // The temperature in Kelvin
		    temperature: DOUBLE
		) =>
		    temperature - 273.15

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Temparature: convert Kelvin(K) to Fahrenheit(°F)
function 'Dax.Convert.KelvinToFahrenheit' =
		(
		    // The temperature in Kelvin
		    temperature: DOUBLE
		) =>
		    ( temperature * ( 9 / 5 ) ) - 459.67

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Distance: convert kilometers(km) to miles(mi)
function 'Dax.Convert.KilometersToMiles' =
		(
		    // The distance in kilometers
		    distance: DOUBLE
		) =>
		    distance / 1.609344

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Flow: convert liters per second (L/s) to cubic meters per hour (m³/h)
function 'Dax.Convert.LitersPerSecondToCubicMetersPerHour' =
		(
		    // The flow rate in liters per second
		    flow: DOUBLE
		) =>
		    flow * 3.6

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Volume: convert liters(L) to gallons(US fluid)
function 'Dax.Convert.LitersToGallons' =
		(
		    // The volume in liters
		    volume: DOUBLE
		) =>
		    volume / 3.785411784

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Distance: convert meters(m) to feet(ft)
function 'Dax.Convert.MetersToFeet' =
		(
		    // The distance in meters
		    distance: DOUBLE
		) =>
		    distance * 3.28084

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Speed: convert miles per hour (mph) to kilometers per hour (km/h)
function 'Dax.Convert.MilesPerHourToKilometersPerHour' =
		(
		    // The speed in miles per hour
		    speed: DOUBLE
		) =>
		    speed * 1.609344

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Distance: convert miles(mi) to kilometers(km)
function 'Dax.Convert.MilesToKilometers' =
		(
		    // The distance in miles
		    distance: DOUBLE
		) =>
		    distance * 1.609344

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Weight: convert pounds(lb:avdp) to kilograms(kg)
function 'Dax.Convert.PoundsToKilograms' =
		(
		    // The weight in pounds
		    weight: DOUBLE
		) =>
		    weight / 2.2046226218487757

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Weight: convert pounds(lb:avdp) to stones(st)
function 'Dax.Convert.PoundsToStones' =
		(
		    // The weight in pounds
		    weight: DOUBLE
		) =>
		    weight / 14

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Area: convert square feet(ft²) to square meters(m²)
function 'Dax.Convert.SquareFeetToSquareMeters' =
		(
		    // The area in square feet
		    area: DOUBLE
		) =>
		    area / 10.763910416709722

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Area: convert square meters(m²) to acres(ac)
function 'Dax.Convert.SquareMetersToAcres' =
		(
		    // The area in square meters
		    area: DOUBLE
		) =>
		    area / 4046.8564224

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Area: convert square meters(m²) to square feet(ft²)
function 'Dax.Convert.SquareMetersToSquareFeet' =
		(
		    // The area in square meters
		    area: DOUBLE
		) =>
		    area * 10.763910416709722

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Weight: convert stones(st) to pounds(lb:avdp)
function 'Dax.Convert.StonesToPounds' =
		(
		    // The weight in stones
		    weight: DOUBLE
		) =>
		    weight * 14

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

/// Time: convert time units to duration in HH:MM:SS format
function 'Dax.Convert.TimeUnitsToDurationHHMMSS' =
		(
		    // The time units
		    units : INT64,
		    // The time units type. Valid values are "SS" (seconds) and "MM" (minutes)
		    unitsType : STRING
		) =>
		    VAR _result =
		        IF (
		            units < 0,
		            ERROR ( "Negative values not allowed. (Parameter `units`)" ),
		            SWITCH (
		                unitsType,
		                "SS",
		                    VAR _hh = INT ( units / 3600 )
		                    VAR _mm = INT ( MOD ( units, 3600 ) / 60 )
		                    VAR _ss = MOD ( units, 60 )
		                    RETURN
		                        FORMAT ( _hh, "00" ) & ":" & FORMAT ( _mm, "00" ) & ":" & FORMAT ( _ss, "00" ),
		                "MM",
		                    VAR _hh = INT ( units / 60 )
		                    VAR _mm = MOD ( units, 60 )
		                    RETURN
		                        FORMAT ( _hh, "00" ) & ":" & FORMAT ( _mm, "00" ) & ":00",
		                ERROR ( "Invalid value. (Parameter `unitsType`)" )
		            )
		        )
		    RETURN
		        _result // TODO: Should the value be returned as a literal? i.e """" & _result & """"

	annotation DAXLIB_PackageId = Dax.Convert

	annotation DAXLIB_PackageVersion = 0.1.4-beta

