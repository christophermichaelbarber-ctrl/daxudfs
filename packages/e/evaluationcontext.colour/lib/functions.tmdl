/// RGB to Hex conversion
/// Red		INT64	The red value (0-255)
/// Green	INT64	The green value (0-255)
/// Blue	INT64	The blue value (0-255)
/// Alpha	DOUBLE	Optional: The alpha value (0-1)
function 'evaluationcontext.colour.RGBTOHEX' =
		(
			Red: INT64,
			Green: INT64,
			Blue: INT64,
			Alpha: DOUBLE
		) =>

			"#" &
			DaxLib.Convert.INTTOHEX( Red, 2 ) &
			DaxLib.Convert.INTTOHEX( Green, 2 ) &
			DaxLib.Convert.INTTOHEX( Blue, 2 ) &
			IF( NOT ISBLANK( Alpha ), DaxLib.Convert.INTTOHEX( Alpha * 255, 2 ), "" )

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// HSL to Hex conversion
/// H		INT64	Hue (0-360)
/// S		DOUBLE	Saturation (0-1)
/// L		DOUBLE	Lightness (0-1)
/// Alpha	DOUBLE	Optional: The alpha value (0-1)
function 'evaluationcontext.colour.HSLTOHEX' =
		(
			H: INT64,
			S: DOUBLE,
			L: DOUBLE,
			Alpha: DOUBLE
		) =>

			VAR C = ( 1 - ABS(2 * L - 1 ) ) * S
			VAR X = C * ( 1 - ABS( MOD( H / 60, 2 ) - 1 ) )
			VAR M = L - C / 2
			
			VAR RGB1 = SWITCH(
				true,
				H < 60, C & "," & X & ",0",
				H < 120, X & "," & C & ",0", 
				H < 180, "0," & C & "," & X,
				H < 240, "0," & X & "," & C,
				H < 300, X & ",0," & C,
				C & ",0," & X
			)
			
			VAR RPrime = 		VALUE( LEFT( RGB1, SEARCH(",", RGB1 ) - 1 ) )
			VAR Remaining = 	RIGHT( RGB1, LEN( RGB1 ) - SEARCH( ",", RGB1 ) )
			VAR GPrime = 		VALUE( LEFT( Remaining, SEARCH( ",", Remaining ) - 1) )
			VAR BPrime = 		VALUE( RIGHT( Remaining, LEN( Remaining ) - SEARCH( ",", Remaining ) ) )
			
			VAR FinalR = 		ROUND( ( RPrime + M) * 255, 0)
			VAR FinalG = 		ROUND( ( GPrime + M) * 255, 0)
			VAR FinalB = 		ROUND( ( BPrime + M) * 255, 0)
			
			VAR result = 
				"#" & 
				DaxLib.Convert.INTTOHEX(FinalR, 2) &
				DaxLib.Convert.INTTOHEX(FinalG, 2) &
				DaxLib.Convert.INTTOHEX(FinalB, 2) &
				IF( NOT ISBLANK( Alpha ), DaxLib.Convert.INTTOHEX( Alpha * 255, 2 ), "" )

			RETURN result

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Hue of Hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
function 'evaluationcontext.colour.HEXHUE' =
		(
			HexColor: STRING
		) =>

			VAR CleanHex = IF( LEFT(HexColor, 1) = "#", MID(HexColor, 2, 6), MID( HexColor, 1, 6 ) )
			VAR R = DaxLib.Convert.HEXTOINT( MID( CleanHex, 1, 2 ) )
			VAR G = DaxLib.Convert.HEXTOINT( MID( CleanHex, 3, 2 ) )
			VAR B = DaxLib.Convert.HEXTOINT( MID( CleanHex, 5, 2 ) )
			
			VAR Mx = MAX( MAX( R, G ), B)
			VAR Mn = MIN( MIN( R, G ), B)
			VAR Delta = Mx - Mn
			
			VAR H = 
				SWITCH(
					true,
					Delta = 0, 0,
					Mx = R, MOD( ( G - B ) / Delta, 6),
					Mx = G, ( ( B - R ) / Delta ) + 2,
					Mx = B, ( ( R - G ) / Delta ) + 4
				) * 60
			VAR result = ROUND(H, 0)
			RETURN result
			
	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Saturation of Hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
function 'evaluationcontext.colour.HEXSATURATION' =
		(
			HexColor: STRING
		) =>

			VAR CleanHex = IF( LEFT(HexColor, 1) = "#", MID(HexColor, 2, 6), MID( HexColor, 1, 6 ) )
			VAR R = DaxLib.Convert.HEXTOINT( MID( CleanHex, 1, 2 ) )
			VAR G = DaxLib.Convert.HEXTOINT( MID( CleanHex, 3, 2 ) )
			VAR B = DaxLib.Convert.HEXTOINT( MID( CleanHex, 5, 2 ) )
			
			VAR Mx = MAX( MAX( R, G ), B)
			VAR Mn = MIN( MIN( R, G ), B)
			VAR Delta = Mx - Mn

			VAR L = ( Mx + Mn ) / 2
			VAR S = 
				SWITCH(
					true,
					Delta = 0, 0,
					L <= 127.5, Delta / (Mx + Mn),
					L > 127.5, Delta / (510 - Mx - Mn)
				)

			RETURN S

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Luminance of Hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
function 'evaluationcontext.colour.HEXLUMINANCE' =
			(
				HexColor: STRING
			) =>
				
				VAR CleanHex = IF( LEFT(HexColor, 1) = "#", MID(HexColor, 2, 6), MID( HexColor, 1, 6 ) )
				VAR R = DaxLib.Convert.HEXTOINT( MID( CleanHex, 1, 2 ) )
				VAR G = DaxLib.Convert.HEXTOINT( MID( CleanHex, 3, 2 ) )
				VAR B = DaxLib.Convert.HEXTOINT( MID( CleanHex, 5, 2 ) )
				
				VAR Mx = MAX( MAX( R, G ), B)
				VAR Mn = MIN( MIN( R, G ), B)
				VAR Delta = Mx - Mn
				
				VAR L = ( Mx + Mn ) / 2
				VAR result = ROUND( L, 4 ) / 255
				
				RETURN result

		annotation DAXLIB_PackageId = EvaluationContext.colour

		annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Alpha of Hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
function 'evaluationcontext.colour.HEXALPHA' =
			(
				HexColor: STRING
			) =>
				
				VAR CleanHex = IF( LEFT(HexColor, 1) = "#", MID(HexColor, 2, 8), MID( HexColor, 1, 8 ) )
				VAR AlphaHex = IF( LEN( CleanHex ) = 8, MID( CleanHex, 7, 2 ), "FF" )
				VAR Alpha = DaxLib.Convert.HEXTOINT( AlphaHex )
				VAR result = ROUND( Alpha / 255, 4 )
				
				RETURN result

		annotation DAXLIB_PackageId = EvaluationContext.colour

		annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Adjust Hue of a hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
/// HueChange	DOUBLE	The hue adjustment in degrees (-360 to 360)
function 'evaluationcontext.colour.HEXADJUSTHUE' = 
			( 
				HexColor: STRING,
				HueChange: DOUBLE
			) => 
				
				VAR H = evaluationcontext.colour.HEXHUE( HexColor )
				VAR S = evaluationcontext.colour.HEXSATURATION( HexColor )
				VAR L = evaluationcontext.colour.HEXLUMINANCE( HexColor )
				VAR A = evaluationcontext.colour.HEXALPHA( HexColor )

				VAR NewH = MOD( H + HueChange + 360, 360 )  // Wrap around 0-360
				
				RETURN 
					evaluationcontext.colour.HSLTOHEX( NewH, S, L, A )

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Adjust Saturation of a hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
/// SaturationChange	DOUBLE	The saturation adjustment (-1 to 1)
function 'evaluationcontext.colour.HEXADJUSTSATURATION' = 
		( 
			HexColor: STRING,
			SaturationChange: DOUBLE
		) => 

			VAR H = evaluationcontext.colour.HEXHUE( HexColor )
			VAR S = evaluationcontext.colour.HEXSATURATION( HexColor )
			VAR L = evaluationcontext.colour.HEXLUMINANCE( HexColor )
			VAR A = evaluationcontext.colour.HEXALPHA( HexColor )

			VAR NewS = MIN( MAX( S + SaturationChange, 0 ), 1 ) 
		
			RETURN 
				evaluationcontext.colour.HSLTOHEX( H, NewS, L, A )
			
	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Adjust Luminance of a hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
/// LuminanceChange	DOUBLE	The luminance adjustment (-1 to 1)
function 'evaluationcontext.colour.HEXADJUSTLUMINANCE' =
			(
				HexColor: STRING,
				LuminanceChange: DOUBLE
			) =>

				VAR H = evaluationcontext.colour.HEXHUE( HexColor )
				VAR S = evaluationcontext.colour.HEXSATURATION( HexColor )
				VAR L = evaluationcontext.colour.HEXLUMINANCE( HexColor )
				VAR A = evaluationcontext.colour.HEXALPHA( HexColor )

				VAR NewL = MIN( MAX( L + LuminanceChange, 0 ), 1 )
				
				RETURN
					evaluationcontext.colour.HSLTOHEX( H, S, NewL, A )
	
	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Adjust Alpha of a Hex color
/// HexColor	STRING	The hex color to evaluate i.e "#01B8AA"
/// AlphaChange	DOUBLE	The alpha adjustment (-1 to 1)
function 'evaluationcontext.colour.HEXADJUSTALPHA' = 
		( 
			HexColor: STRING,
			AlphaChange: DOUBLE
		) => 

			VAR CleanHex = IF( LEFT(HexColor, 1) = "#", MID(HexColor, 2, 6), MID( HexColor, 1, 6 ) )
			VAR A = evaluationcontext.colour.HEXALPHA( HexColor )
			
			VAR NewA = DaxLib.Convert.INTTOHEX( MIN( MAX( A + AlphaChange, 0 ), 1 ) * 255, 2 )

			VAR result = "#" & CleanHex & NewA

			RETURN result

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Adjust Hue, Saturation, Luminance and Alpha of a hex color
/// HexColor			STRING	The hex color to evaluate i.e "#01B8AA"
/// HueChange			DOUBLE	The hue adjustment in degrees (-360 to 360), 0 for no change
/// SaturationChange	DOUBLE	The saturation adjustment (-1 to 1), 0 for no change
/// LuminanceChange		DOUBLE	The luminance adjustment (-1 to 1), 0 for no change
/// AlphaChange			DOUBLE	The alpha adjustment (-1 to 1), 0 for no change
function 'evaluationcontext.colour.HEXADJUSTCOLOR' = 
		( 
			HexColor: STRING,
			HueChange: INT64,
			SaturationChange: DOUBLE,
			LuminanceChange: DOUBLE,
			AlphaChange: DOUBLE
		) => 

			VAR Step1 = IF( HueChange = 0, HexColor, evaluationcontext.colour.HEXADJUSTHUE( HexColor, HueChange ) )
			VAR Step2 = IF( SaturationChange = 0, Step1, evaluationcontext.colour.HEXADJUSTSATURATION( Step1, SaturationChange ) )
			VAR Step3 = IF( LuminanceChange = 0, Step2, evaluationcontext.colour.HEXADJUSTLUMINANCE( Step2, LuminanceChange ) )
			VAR Step4 = IF( AlphaChange = 0, Step3, evaluationcontext.colour.HEXADJUSTALPHA( Step3, AlphaChange ) )
			
			RETURN Step4

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Select theme colour, wrapping around to the start if variant exceeds available options
/// ThemeName	STRING	The theme name e.g. "Office", "Power BI"
/// Variant		INT64	The variant index (1-N, wraps around if exceeds available variants)
function 'evaluationcontext.colour.THEME' =
		(
			ThemeName: STRING,
			Variant: INT64
		) =>

			VAR Themes = 
				DATATABLE(
				"ThemeName", STRING,
				"Variant", INTEGER,
				"Colour", STRING,
				{
					// Power BI Default 
					{"Power BI", 1, "#118DFF"},
					{"Power BI", 2, "#12239E"},
					{"Power BI", 3, "#E66C37"},
					{"Power BI", 4, "#6B007B"},
					{"Power BI", 5, "#E044A7"},
					{"Power BI", 6, "#744EC2"},
					{"Power BI", 7, "#D9B300"},
					{"Power BI", 8, "#D64550"},
					{"Power BI", 9, "#197278"},
					{"Power BI", 10, "#1AAB40"},
					{"Power BI", 11, "#15C6F4"},
					{"Power BI", 12, "#4092FF"},
					{"Power BI", 13, "#FFA058"},
					{"Power BI", 14, "#BE5DC9"},
					{"Power BI", 15, "#F472D0"},
					{"Power BI", 16, "#B5A1FF"},
					{"Power BI", 17, "#C4A200"},
					{"Power BI", 18, "#FF8080"},
					{"Power BI", 19, "#00DBBC"},
					{"Power BI", 20, "#5BD667"},
					{"Power BI", 21, "#0091D5"},
					{"Power BI", 22, "#4668C5"},
					{"Power BI", 23, "#FF6300"},
					{"Power BI", 24, "#99008A"},
					{"Power BI", 25, "#EC008C"},
					{"Power BI", 26, "#533285"},
					{"Power BI", 27, "#99700A"},
					{"Power BI", 28, "#FF4141"},
					{"Power BI", 29, "#1F9A85"},
					{"Power BI", 30, "#25891C"},
					{"Power BI", 31, "#0057A2"},
					{"Power BI", 32, "#002050"},
					{"Power BI", 33, "#C94F0F"},
					{"Power BI", 34, "#450F54"},
					{"Power BI", 35, "#B60064"},
					{"Power BI", 36, "#34124F"},
					{"Power BI", 37, "#6A5A29"},
					{"Power BI", 38, "#1AAB40"},
					{"Power BI", 39, "#BA141A"},
					{"Power BI", 40, "#0C3D37"},
					{"Power BI", 41, "#0B511F"},
					
					// Modern Corporate - Professional blues and grays
					{"Modern Corporate", 1, "#2E3440"},
					{"Modern Corporate", 2, "#3B4252"},
					{"Modern Corporate", 3, "#434C5E"},
					{"Modern Corporate", 4, "#4C566A"},
					{"Modern Corporate", 5, "#5E81AC"},
					{"Modern Corporate", 6, "#81A1C1"},
					
					// Ocean Breeze - Cool blues and teals
					{"Ocean Breeze", 1, "#0077BE"},
					{"Ocean Breeze", 2, "#00A8CC"},
					{"Ocean Breeze", 3, "#40E0D0"},
					{"Ocean Breeze", 4, "#87CEEB"},
					{"Ocean Breeze", 5, "#B0E0E6"},
					{"Ocean Breeze", 6, "#E0F6FF"},
					
					// Sunset Vibes - Warm oranges and reds
					{"Sunset Vibes", 1, "#FF6B35"},
					{"Sunset Vibes", 2, "#F7931E"},
					{"Sunset Vibes", 3, "#FFD23F"},
					{"Sunset Vibes", 4, "#EE4B2B"},
					{"Sunset Vibes", 5, "#C04000"},
					{"Sunset Vibes", 6, "#FFCBA4"},
					
					// Forest Green - Natural greens
					{"Forest Green", 1, "#355E3B"},
					{"Forest Green", 2, "#228B22"},
					{"Forest Green", 3, "#32CD32"},
					{"Forest Green", 4, "#90EE90"},
					{"Forest Green", 5, "#98FB98"},
					{"Forest Green", 6, "#F0FFF0"},
					
					// Purple Rain - Rich purples
					{"Purple Rain", 1, "#301934"},
					{"Purple Rain", 2, "#663399"},
					{"Purple Rain", 3, "#9966CC"},
					{"Purple Rain", 4, "#BA55D3"},
					{"Purple Rain", 5, "#DDA0DD"},
					{"Purple Rain", 6, "#E6E6FA"},
					
					// Monochrome - Sophisticated grays
					{"Monochrome", 1, "#1C1C1C"},
					{"Monochrome", 2, "#333333"},
					{"Monochrome", 3, "#666666"},
					{"Monochrome", 4, "#999999"},
					{"Monochrome", 5, "#CCCCCC"},
					{"Monochrome", 6, "#F5F5F5"},
					
					// Vibrant Tech - Bold and energetic
					{"Vibrant Tech", 1, "#FF0080"},
					{"Vibrant Tech", 2, "#00FFFF"},
					{"Vibrant Tech", 3, "#FFFF00"},
					{"Vibrant Tech", 4, "#FF8000"},
					{"Vibrant Tech", 5, "#8000FF"},
					{"Vibrant Tech", 6, "#00FF80"},
					
					// Earth Tones - Natural browns and beiges
					{"Earth Tones", 1, "#8B4513"},
					{"Earth Tones", 2, "#A0522D"},
					{"Earth Tones", 3, "#CD853F"},
					{"Earth Tones", 4, "#DEB887"},
					{"Earth Tones", 5, "#F4A460"},
					{"Earth Tones", 6, "#FFF8DC"},
					
					// Pastel Dreams - Soft and gentle
					{"Pastel Dreams", 1, "#FFB3BA"},
					{"Pastel Dreams", 2, "#FFDFBA"},
					{"Pastel Dreams", 3, "#FFFFBA"},
					{"Pastel Dreams", 4, "#BAFFC9"},
					{"Pastel Dreams", 5, "#BAE1FF"},
					// {"Pastel Dreams", 6, "#E1BAFF"},
					
					// Midnight Blue - Deep blues and navy
					{"Midnight Blue", 1, "#191970"},
					{"Midnight Blue", 2, "#000080"},
					{"Midnight Blue", 3, "#0000CD"},
					{"Midnight Blue", 4, "#4169E1"},
					{"Midnight Blue", 5, "#6495ED"},
					{"Midnight Blue", 6, "#B0C4DE"}
				}
			)

			VAR ThemeColors = FILTER(Themes, [ThemeName] = ThemeName)
			VAR MaxVariant = MAXX(ThemeColors, [Variant])
			VAR AdjustedVariant = IF(
				MaxVariant > 0,
				MOD(Variant - 1, MaxVariant) + 1,
				Variant
			)
			VAR SelectedColor = 
				MAXX(
					FILTER(ThemeColors, [Variant] = AdjustedVariant),
					[Colour]
				)

			RETURN SelectedColor

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Linear gradient of a hex colour
/// HexColor		STRING	The base hex color e.g. "#01B8AA"
/// Variant			INT64	The variant index (1-N, wraps around if exceeds steps)
/// Steps			INT64	The number of steps in the gradient (minimum = 2)
/// LinearRange		DOUBLE	The range of luminance adjustment for linear theme (e.g. 0.6 for a range of -0.3 to +0.3)
function 'evaluationcontext.colour.LINEARTHEME' =
		(
			HexColor: STRING,
			Variant: INT64,
			Steps: INT64,
			LinearRange: DOUBLE
		) =>

			VAR StepSize = LinearRange / ( Steps - 1 )
			VAR AdjustedVariant = MOD(Variant - 1, Steps) + 1
			VAR Hex = evaluationcontext.colour.HEXADJUSTLUMINANCE( 
				HexColor, 
				( (AdjustedVariant - 1) * StepSize ) - ( LinearRange / 2 ) 
			)
			
			RETURN Hex

	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta

/// Select a text color (black or white) based on background hex color for contrast
/// BackgroundHex	STRING	The background hex color to evaluate i.e "#01B8AA"
function 'evaluationcontext.colour.TEXTCOLOR' =
		(
			BackgroundHex: STRING
		) =>

			VAR L = evaluationcontext.colour.HEXLUMINANCE( BackgroundHex )
			VAR result = IF( L > 0.5, "#000000", "#FFFFFF")  //// dark text for light backgrounds, light text for dark backgrounds
			RETURN result
			
	annotation DAXLIB_PackageId = EvaluationContext.colour

	annotation DAXLIB_PackageVersion = 0.1.0-beta